# === Required Properties ===
# These properties are required regardless of the request and should maintain a uniform syntax.

# [REQUIRED]
# Name of the call to be referenced in the engine
request.name=	template

# [REQUIRED]
# Base url of the REST API call
url.base=		http://localhost:8080

# [OPTIONAL]
# Url PATH properties that are required for parsing of the system. For example, if the url is
# https://localhost:8080/api/v1/<asset>/<value> where asset is dictated by the parameter 'asset',
# then this variable will be set to 'asset,.' Note all properties are in sequential order, such that
# asset must be defined before value.
url.base.path=	asset,.,\
				value,.

# [REQUIRED]
# This property details all required properties to be passed on runtime when called. Optional
# properties are not required to be specified here. Note that properties can be given a default 
# value or can be forced to be specified. The list is in (<key>, <value>) pairs, with each property
# having both a key and value specified. Default values can be placed in the <value> property.
# Key's with no default property that are required on runtime can be filled as '.'. In this example
# <property1> has the default value <value1>, <property2> is required on runtime, and <property3>
# has the default value <value3>.
url.properties=	property1,value1,\
				property2,.,\
				property3,value3
				
# [REQUIRED]
# This property details all headers to be passed on runtime when generating the request.
# Optional headers can be passed on runtime and are not required to be specified here. Note
# that headers can be given a default value or can be forced to be specified. The list is in
# (<key>, <value>) pairs, with each property having both a key and value specified. Default
# values can be placed in the <value> property. Key's with no default property that are required
# on runtime can be filled as '.'. In this example <header1> has the default value <value1>,
# and headers <header2> and <header3> are required on runtime.
url.headers=	header1,value1,\
				header2,.,\
				header3,.
			
# [REQUIRED]
# This property sets the location of the data points to be retrieved from the call. This
# should be a JSONArray which the handler can iterate through. To access these data points
# directly, the direct path must be specified (consisting of all JSONObject values). In 
# the example below, we point to the path located at response->data. Note that for storing
# all non-array values and just recording all base values returned by the call, please set
# the value of this variable to '-b'. (i.e. url.data.path=-b)
data.path=			response,\
						data

# [REQUIRED]			
# This property determines if the call is recursive, meaning that all data points required
# cannot be obtained in a single request. There are several integrated recursive types
# which have specific properties and handlers. Please review documentation to get a full
# list of these tags. To default with no recursive call, set this property to <single>.
# This property we will set to <parameterized> for a clearer example.
recursion.type=		parameterized

# [OPTIONAL]:
# - url.recursion.type = static
# [REQUIRED]:
# - url.recursion.type = parameterized
# This property sets all tags pertaining to the type of recursive call. Please refer to
# the documentation for the full list of all tags and specified recursive types. All tags
# are in (<key>, <value>) pairs, with each property having both a key and value specified.
# Should a tag not require an accompanying <value>, please set it to '.'. In this
# example we will set the tags for <parameterized> which are as follows:
# -l:	limit on items from request
# -t:	type of recursive parameter (url, incremental, static)
recursion.tags=		-l,1000,\
					-t,url
				
# [OPTIONAL]:
# - url.recursion.type = static
# [REQUIRED]:
# - url.recursion.type = parameterized
# This property sets the recurisve parameters location within the response. Should '-t' in
# url.recursion.tags be of type 'incremental', this property should be the property to be
# incremented in the url. Otherwise if it is of type 'url' or 'static', point to the exact
# location in the response which will retrieve this property. For example if the next url
# is contained in:
# {
# 	"payload": {
# 		"metadata": {
# 			"next": "https://..."
# 		}
# 	}
# }
# this property would be set to 'payload,metadata,next'. For properties with no recursive call
# (with recursion type 'single') this parameter can remain blank.
recursion.location= payload,metadata,next

# [OPTIONAL]:
# - url.recursion.type = static
# [REQUIRED]:
# - url.recursion.type = parameterized
# If the property defined in url.recursion.location is not the same as the property to replace
# in the url, define it here. If they are the same, this property can remain blank. This property
# will primarily be used if url.recursion.tags '-t' is set to 'static'. For '-t' being set to
# 'url', this property can remain blank.
recursion.replacement=

# [REQUIRED]
# This parameter is used to determine whether the protocol can be dated or not. If so, the following
# properties are required: date.location, date.start, date.end, and date.format.
date.valid=		true

# [OPTIONAL]:
# - date.enable = false
# [REQUIRED]:
# - date.enable = true
# This property tells the location of the date variable, whether in the 'properties' or 'header' (note add
# path at a later date). This property will default to properties.
date.location=	properties

# [OPTIONAL]:
# - date.enable = false
# [REQUIRED]:
# - date.enable = true
# This property tells what key value will point to the start date variable. This is required and if no
# end date is required, use this as the primary date.
date.start=		startDate

# [OPTIONAL]:
# - date.enable = false
# [REQUIRED]:
# - date.enable = true
# This property tells what key value will point to the end date variable. This is not required if there
# is only one variable needed to reference the date. If so, set this value to '.'
date.end=		endDate

# [OPTIONAL]:
# - date.enable = false
# [REQUIRED]:
# - date.enable = true
# This property states the format for the date to be pushed to the parameter. Note this value will be extracted
# from the original call (which will be of the form yyyy-MM-dd and will always default to midnight should a time
# be required).
date.format=	yyyy-MM-dd